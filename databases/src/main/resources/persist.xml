<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
           http://www.springframework.org/schema/aop
           http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context-3.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

    <!-- xml方式配置包扫描路径 -->
    <context:component-scan base-package="com.springboot.core">
        <!-- 在基本包路径下，排除指定注解的类作为bean注入 -->
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Service"/>
    </context:component-scan>

    <!-- 配置数据源 -->
    <bean id="dataSource"
          class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="com.mysql.jdbc.Driver" />
        <property name="url" value="jdbc:mysql://localhost:3306/test" />
        <property name="username" value="root" />
        <property name="password" value="christmas258@" />
    </bean>
    <!--配置一个JdbcTemplate实例，并将这个“共享的”，“安全的”实例注入到不同的DAO类中去 -->
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource" />
    </bean>
    <!-- 声明事务管理器 -->
    <bean id="txManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>
    <!-- 需要实施事务增强的目标业务Bean -->
    <!--<bean id="libraryTarget" class="com.mucfc.dao.LibraryDaoImpl"
          p:jdbcTemplate-ref="jdbcTemplate" />-->

    <!-- 使用事务代理工厂类为目标业务Bean提供事务增强 -->
    <!--<bean id="libraryFactory"
          class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean"
          p:transactionManager-ref="txManager" p:target-ref="libraryTarget">
        &lt;!&ndash; 事务属性配置 &ndash;&gt;
        <property name="transactionAttributes">
            <props>
                &lt;!&ndash; 以get开头的方法采用只读型事务控制类型 &ndash;&gt;
                <prop key="get*">PROPAGATION_REQUIRED,readOnly</prop>
                &lt;!&ndash; 所有方法均进行事务控制，如果当前没有事务，则新建一个事务 &ndash;&gt;
                <prop key="addBook">PROPAGATION_REQUIRED</prop>
            </props>
        </property>
    </bean>-->

    <!-- aop切面自动代理设置
     Spring与SpringMVC是2个不同的父子容器，
     @Aspect如果被spring容器加载的话，而@Controller注解的这些类的实例化以及注入却是由SpringMVC来完成。
     @Aspect如果被spring容器加载的时候，可能Spring MVC容器还未初始化，Controller类还未初始化，所以无法正常织入。
     -->
    <aop:aspectj-autoproxy proxy-target-class="true" expose-proxy="true" />
    <!-- xml方式配置事物管理器 -->
    <tx:annotation-driven transaction-manager="txManager" proxy-target-class="true" />
    <!-- 使用tx/aop来配置 -->
    <aop:config>
        <!-- 通过aop定义事务增强切面 -->
        <aop:pointcut id="serviceMethod"
                      expression="execution(* com..dao*.LibraryDaoImpl.*(..))" />
        <!-- 引用事务增强 -->
        <aop:advisor pointcut-ref="serviceMethod" advice-ref="txAdvice" />
    </aop:config>

    <!--事务增强 -->
    <tx:advice id="txAdvice" transaction-manager="txManager">
        <!-- 事务属性定义 -->
        <tx:attributes>
            <tx:method name="del*" />
            <tx:method name="delete*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception" no-rollback-for="java.lang.RuntimeException"/>
            <tx:method name="add*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception" />
            <tx:method name="insert*" propagation="REQUIRED" isolation="SERIALIZABLE" read-only="false" rollback-for="java.lang.Exception" />
            <tx:method name="update*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception" />
            <tx:method name="modify*" propagation="REQUIRES_NEW" read-only="false" rollback-for="java.lang.Exception" />
            <tx:method name="find*" propagation="SUPPORTS"/>
            <tx:method name="get*" propagation="SUPPORTS" isolation="SERIALIZABLE" read-only="false" />
            <tx:method name="select*" propagation="REQUIRED" isolation="SERIALIZABLE"/>
        </tx:attributes>
    </tx:advice>

</beans>